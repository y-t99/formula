Formula {
  Expression
    = Statement

  Statement
    = Operator
    | PriorityStatement
    
  Operator
    = BinaryOperator -- binary
    | UnaryOperator -- unary
 
  BinaryOperator
    = BinaryOperator BinaryOperatorToken PriorityStatement
   | PriorityStatement BinaryOperatorToken BinaryOperator
   | BinaryOperator BinaryOperatorToken UnaryOperator
   | UnaryOperator BinaryOperatorToken BinaryOperator
   | UnaryOperator BinaryOperatorToken UnaryOperator
   | PriorityStatement BinaryOperatorToken UnaryOperator
   | UnaryOperator BinaryOperatorToken PriorityStatement
   | PriorityStatement BinaryOperatorToken PriorityStatement
  
  UnaryOperator
    = UnaryOperatorToken PriorityStatement
    | UnaryOperatorToken UnaryOperator  
    
  BinaryOperatorToken
    = LowerPrecedenceBinaryOperatorToken
    | LowPrecedenceBinaryOperatorToken
    | HighPrecedenceBinaryOperatorToken
    | HigherPrecedenceBinaryOperatorToken
    | HighestPrecedenceBinaryOperatorToken
  
  LowerPrecedenceBinaryOperatorToken
    = "||" | "&&"
  
  LowPrecedenceBinaryOperatorToken
    = "=" |  "!="
  
  HighPrecedenceBinaryOperatorToken
  	= "<=" | ">=" | "<" | ">"
  
  HigherPrecedenceBinaryOperatorToken
    = "+" | "-"
  
  HighestPrecedenceBinaryOperatorToken
    = "*" | "/" | "%"
  
  UnaryOperatorToken
    = "!" | "+" | "-"
  
  identifier (an identifier) 
    = ~reservedWord identifierName
  
  identifierName 
    = "Contains" | "Find" | "Join" | "Left"
    | "Length" | "Lowercase" | "Replace" | "Right"
    | "Substring" | "Uppercase"
  
  reservedWord 
    = nullLiteral | booleanLiteral
  
  PriorityStatement
    = CallStatement
    | "(" Expression ")"  --expression
    | valueLiteral

  CallStatement
    = identifier args
  
  args = "(" listOf<(valueLiteral), ","> ")"
  
  valueLiteral
   	= number
    | string
    | nullLiteral
    | booleanLiteral
    | "[" listOf<(valueLiteral), ","> "]" -- array

  nullLiteral 
  	= "null"
  
  booleanLiteral 
  	= "true" | "false"
    
  string 
  	= "\"" (~"\"" any)* "\""

  number  (a number)
    = digit+ "." digit+  -- fract
    | digit+             -- whole
}