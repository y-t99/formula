// AUTOGENERATED FILE
// This file was generated from lisp.ohm by `ohm generateBundles`.

import {
  BaseActionDict,
  Grammar,
  IterationNode,
  Node,
  NonterminalNode,
  Semantics,
  TerminalNode
} from 'ohm-js';

export interface LispActionDict<T> extends BaseActionDict<T> {
  Program?: (this: NonterminalNode, arg0: IterationNode) => T;
  Sexp?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: TerminalNode) => T;
  Stmt_quasiquote?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode) => T;
  Stmt_quote?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode) => T;
  Stmt_def?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode, arg2: NonterminalNode) => T;
  Stmt_fn?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode, arg2: NonterminalNode) => T;
  Stmt_macro?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode, arg2: NonterminalNode) => T;
  Stmt_list?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Stmt?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  def?: (this: NonterminalNode, arg0: TerminalNode) => T;
  quasiquote?: (this: NonterminalNode, arg0: TerminalNode) => T;
  quote?: (this: NonterminalNode, arg0: TerminalNode) => T;
  fn?: (this: NonterminalNode, arg0: TerminalNode) => T;
  macro?: (this: NonterminalNode, arg0: TerminalNode) => T;
  identifierPart?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  argList?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: TerminalNode) => T;
  arg?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  symbol?: (this: NonterminalNode, arg0: IterationNode) => T;
  string?: (this: NonterminalNode, arg0: TerminalNode, arg1: IterationNode, arg2: TerminalNode) => T;
  sign?: (this: NonterminalNode, arg0: TerminalNode) => T;
  number?: (this: NonterminalNode, arg0: IterationNode) => T;
  comment?: (this: NonterminalNode, arg0: TerminalNode, arg1: IterationNode, arg2: NonterminalNode) => T;
  eol?: (this: NonterminalNode, arg0: TerminalNode) => T;
  space?: (this: NonterminalNode, arg0: NonterminalNode | TerminalNode) => T;
}

export interface LispSemantics extends Semantics {
  addOperation<T>(name: string, actionDict: LispActionDict<T>): this;
  extendOperation<T>(name: string, actionDict: LispActionDict<T>): this;
  addAttribute<T>(name: string, actionDict: LispActionDict<T>): this;
  extendAttribute<T>(name: string, actionDict: LispActionDict<T>): this;
}

export interface LispGrammar extends Grammar {
  createSemantics(): LispSemantics;
  extendSemantics(superSemantics: LispSemantics): LispSemantics;
}

declare const grammar: LispGrammar;
export default grammar;

