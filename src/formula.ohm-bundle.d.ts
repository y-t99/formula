// AUTOGENERATED FILE
// This file was generated from formula.ohm by `ohm generateBundles`.

import {
  BaseActionDict,
  Grammar,
  IterationNode,
  Node,
  NonterminalNode,
  Semantics,
  TerminalNode
} from 'ohm-js';

export interface FormulaActionDict<T> extends BaseActionDict<T> {
  Expression?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Statement?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Operator_binary?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Operator_unary?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Operator?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  BinaryOperator?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode, arg2: NonterminalNode) => T;
  UnaryOperator?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode) => T;
  PriorityStatement_expression?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: TerminalNode) => T;
  PriorityStatement?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  BinaryOperatorToken?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  LowerPrecedenceBinaryOperatorToken?: (this: NonterminalNode, arg0: TerminalNode) => T;
  LowPrecedenceBinaryOperatorToken?: (this: NonterminalNode, arg0: TerminalNode) => T;
  HighPrecedenceBinaryOperatorToken?: (this: NonterminalNode, arg0: TerminalNode) => T;
  HigherPrecedenceBinaryOperatorToken?: (this: NonterminalNode, arg0: TerminalNode) => T;
  HighestPrecedenceBinaryOperatorToken?: (this: NonterminalNode, arg0: TerminalNode) => T;
  UnaryOperatorToken?: (this: NonterminalNode, arg0: TerminalNode) => T;
  number_fract?: (this: NonterminalNode, arg0: IterationNode, arg1: TerminalNode, arg2: IterationNode) => T;
  number_whole?: (this: NonterminalNode, arg0: IterationNode) => T;
  number?: (this: NonterminalNode, arg0: NonterminalNode) => T;
}

export interface FormulaSemantics extends Semantics {
  addOperation<T>(name: string, actionDict: FormulaActionDict<T>): this;
  extendOperation<T>(name: string, actionDict: FormulaActionDict<T>): this;
  addAttribute<T>(name: string, actionDict: FormulaActionDict<T>): this;
  extendAttribute<T>(name: string, actionDict: FormulaActionDict<T>): this;
}

export interface FormulaGrammar extends Grammar {
  createSemantics(): FormulaSemantics;
  extendSemantics(superSemantics: FormulaSemantics): FormulaSemantics;
}

declare const grammar: FormulaGrammar;
export default grammar;

